// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: helloworld.proto

package pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	pb "github.com/frozenbonito/connect-error-metadata/pb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GreeterName is the fully-qualified name of the Greeter service.
	GreeterName = "helloworld.Greeter"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreeterSayHelloProcedure is the fully-qualified name of the Greeter's SayHello RPC.
	GreeterSayHelloProcedure = "/helloworld.Greeter/SayHello"
	// GreeterSayHelloStreamReplyProcedure is the fully-qualified name of the Greeter's
	// SayHelloStreamReply RPC.
	GreeterSayHelloStreamReplyProcedure = "/helloworld.Greeter/SayHelloStreamReply"
	// GreeterSayHelloBidiStreamProcedure is the fully-qualified name of the Greeter's
	// SayHelloBidiStream RPC.
	GreeterSayHelloBidiStreamProcedure = "/helloworld.Greeter/SayHelloBidiStream"
)

// GreeterClient is a client for the helloworld.Greeter service.
type GreeterClient interface {
	// Sends a greeting
	SayHello(context.Context, *connect.Request[pb.HelloRequest]) (*connect.Response[pb.HelloReply], error)
	SayHelloStreamReply(context.Context, *connect.Request[pb.HelloRequest]) (*connect.ServerStreamForClient[pb.HelloReply], error)
	SayHelloBidiStream(context.Context) *connect.BidiStreamForClient[pb.HelloRequest, pb.HelloReply]
}

// NewGreeterClient constructs a client for the helloworld.Greeter service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreeterClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GreeterClient {
	baseURL = strings.TrimRight(baseURL, "/")
	greeterMethods := pb.File_helloworld_proto.Services().ByName("Greeter").Methods()
	return &greeterClient{
		sayHello: connect.NewClient[pb.HelloRequest, pb.HelloReply](
			httpClient,
			baseURL+GreeterSayHelloProcedure,
			connect.WithSchema(greeterMethods.ByName("SayHello")),
			connect.WithClientOptions(opts...),
		),
		sayHelloStreamReply: connect.NewClient[pb.HelloRequest, pb.HelloReply](
			httpClient,
			baseURL+GreeterSayHelloStreamReplyProcedure,
			connect.WithSchema(greeterMethods.ByName("SayHelloStreamReply")),
			connect.WithClientOptions(opts...),
		),
		sayHelloBidiStream: connect.NewClient[pb.HelloRequest, pb.HelloReply](
			httpClient,
			baseURL+GreeterSayHelloBidiStreamProcedure,
			connect.WithSchema(greeterMethods.ByName("SayHelloBidiStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// greeterClient implements GreeterClient.
type greeterClient struct {
	sayHello            *connect.Client[pb.HelloRequest, pb.HelloReply]
	sayHelloStreamReply *connect.Client[pb.HelloRequest, pb.HelloReply]
	sayHelloBidiStream  *connect.Client[pb.HelloRequest, pb.HelloReply]
}

// SayHello calls helloworld.Greeter.SayHello.
func (c *greeterClient) SayHello(ctx context.Context, req *connect.Request[pb.HelloRequest]) (*connect.Response[pb.HelloReply], error) {
	return c.sayHello.CallUnary(ctx, req)
}

// SayHelloStreamReply calls helloworld.Greeter.SayHelloStreamReply.
func (c *greeterClient) SayHelloStreamReply(ctx context.Context, req *connect.Request[pb.HelloRequest]) (*connect.ServerStreamForClient[pb.HelloReply], error) {
	return c.sayHelloStreamReply.CallServerStream(ctx, req)
}

// SayHelloBidiStream calls helloworld.Greeter.SayHelloBidiStream.
func (c *greeterClient) SayHelloBidiStream(ctx context.Context) *connect.BidiStreamForClient[pb.HelloRequest, pb.HelloReply] {
	return c.sayHelloBidiStream.CallBidiStream(ctx)
}

// GreeterHandler is an implementation of the helloworld.Greeter service.
type GreeterHandler interface {
	// Sends a greeting
	SayHello(context.Context, *connect.Request[pb.HelloRequest]) (*connect.Response[pb.HelloReply], error)
	SayHelloStreamReply(context.Context, *connect.Request[pb.HelloRequest], *connect.ServerStream[pb.HelloReply]) error
	SayHelloBidiStream(context.Context, *connect.BidiStream[pb.HelloRequest, pb.HelloReply]) error
}

// NewGreeterHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreeterHandler(svc GreeterHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	greeterMethods := pb.File_helloworld_proto.Services().ByName("Greeter").Methods()
	greeterSayHelloHandler := connect.NewUnaryHandler(
		GreeterSayHelloProcedure,
		svc.SayHello,
		connect.WithSchema(greeterMethods.ByName("SayHello")),
		connect.WithHandlerOptions(opts...),
	)
	greeterSayHelloStreamReplyHandler := connect.NewServerStreamHandler(
		GreeterSayHelloStreamReplyProcedure,
		svc.SayHelloStreamReply,
		connect.WithSchema(greeterMethods.ByName("SayHelloStreamReply")),
		connect.WithHandlerOptions(opts...),
	)
	greeterSayHelloBidiStreamHandler := connect.NewBidiStreamHandler(
		GreeterSayHelloBidiStreamProcedure,
		svc.SayHelloBidiStream,
		connect.WithSchema(greeterMethods.ByName("SayHelloBidiStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/helloworld.Greeter/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GreeterSayHelloProcedure:
			greeterSayHelloHandler.ServeHTTP(w, r)
		case GreeterSayHelloStreamReplyProcedure:
			greeterSayHelloStreamReplyHandler.ServeHTTP(w, r)
		case GreeterSayHelloBidiStreamProcedure:
			greeterSayHelloBidiStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGreeterHandler returns CodeUnimplemented from all methods.
type UnimplementedGreeterHandler struct{}

func (UnimplementedGreeterHandler) SayHello(context.Context, *connect.Request[pb.HelloRequest]) (*connect.Response[pb.HelloReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("helloworld.Greeter.SayHello is not implemented"))
}

func (UnimplementedGreeterHandler) SayHelloStreamReply(context.Context, *connect.Request[pb.HelloRequest], *connect.ServerStream[pb.HelloReply]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("helloworld.Greeter.SayHelloStreamReply is not implemented"))
}

func (UnimplementedGreeterHandler) SayHelloBidiStream(context.Context, *connect.BidiStream[pb.HelloRequest, pb.HelloReply]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("helloworld.Greeter.SayHelloBidiStream is not implemented"))
}
